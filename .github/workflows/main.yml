 name: CI

on:
  push:
    branches: [main, master]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Lint • Generate Assets • Verify
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Python (Pillow/NumPy for fractal foundry) ----------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system packages for Pillow
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libjpeg-turbo8-dev \
            zlib1g-dev \
            libpng-dev \
            libfreetype6-dev \
            liblcms2-dev \
            libtiff5-dev \
            libwebp-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libopenjp2-7-dev

      - name: Install Python dependencies
        env:
          PIP_PREFER_BINARY: "1"
        run: |
          python -m pip install --upgrade pip
          if [[ -f requirements.txt ]]; then
            pip install --only-binary=:all: -r requirements.txt || pip install -r requirements.txt
          else
            # Minimal set if no requirements.txt present
            pip install --only-binary=:all: pillow numpy
          fi

      - name: Verify Pillow works
        run: |
          python - << 'PY'
          import PIL; from PIL import Image
          print("Pillow", PIL.__version__)
          im = Image.new("RGB",(16,16),"black"); im.putpixel((0,0),(255,0,0))
          print("OK:", im.getpixel((0,0))==(255,0,0))
          PY

      # ---------- Node (static front-end tooling) ----------
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Node dependencies
        run: |
          if [[ -f package-lock.json ]]; then
            npm ci
          else
            npm i --no-audit --no-fund
          fi

      - name: Prettier check (if configured)
        run: |
          if npm run -s | grep -q "^  check"; then
            npm run check
          else
            npx --yes prettier -c . || true
          fi

      - name: Run unit tests (if present)
        run: |
          if npm run -s | grep -q "^  test"; then
            npm test
          else
            echo "No tests defined. Skipping."
          fi

      # ---------- Asset generation (fast CI preset) ----------
      - name: Generate fractal flames and atlas
        run: |
          if [[ -f scripts/generate_flame.py ]]; then
            python3 scripts/generate_flame.py all \
              --root assets/flame \
              --count 4 \
              --width 1536 \
              --height 1536 \
              --samples 800000 \
              --palette auto \
              --thumb-size 512
          else
            echo "scripts/generate_flame.py not found, skipping."
          fi

      - name: Upload flame assets (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flame-assets
          path: |
            assets/flame/**
          if-no-files-found: warn

      # ---------- Static integrity sanity checks ----------
      - name: Verify app entry exists
        run: |
          test -f app/index.html || { echo "Missing app/index.html"; exit 1; }
          echo "Found app/index.html"

      - name: List build summary
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version:  $(npm -v)"
          python - << 'PY'
          import sys, platform
          print("Python:", sys.version.split()[0], "on", platform.system())
          PY
          if [[ -d assets/flame ]]; then
            echo "Flame assets:"
            ls -lah assets/flame | sed 's/^/  /'
          else
            echo "No flame assets directory."
          fi